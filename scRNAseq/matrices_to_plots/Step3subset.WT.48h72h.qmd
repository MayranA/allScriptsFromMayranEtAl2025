---
title: "Single cell RNAseq analysis of WT gastruloids (48h+72h)"
format: html
editor: visual
author : Alexandre Mayran
---

```{r, setup, include=FALSE}
# choose working directory
wd <- "/data/home/ldelisle/allScriptsFromMayranEtAl2025"
knitr::opts_knit$set(root.dir = wd)
```

# Subset only the cells of interest

## We load all the required packages

```{r}
#| label: Loading packages and variable
scRNAseqFunctions.file.path <- "scRNAseq/matrices_to_plots/scRNAseqFunctions.R"
scRNAseqParam.file.path <- "scRNAseq/matrices_to_plots/scRNAseqWTparams.R"
source(scRNAseqFunctions.file.path)
source(scRNAseqParam.file.path)
```


## We define the parameters for display

```{r}
# Here you need to define the name of the folder where the RDS is
RDSfolder <- "../mountDuboule/Alex/R/RDS_new"
# This output.directory will be used for plots
output.directory <- "output.files/scRNAseq/matrices_to_plots/WT.subset.48h72h/"
# Here put name of merged RDS as given in step 2
nameRDS <- "combined.WT_ad2bdca4.RDS"
# Metadata present in the combined seurat which will be used to subset:
metadata.subset <- "Sample.name"
# Values to keep
metadata.subset.values <- c("48h.WT.rep1", "72h.WT.rep1", "72h.WT.rep2")
# Subsetted RDS
nameRDS.subset <- "subset.48h72h.RDS"
# Check the subsetted RDS file exists or the combined:
if (file.exists(file.path(RDSfolder, "analyzed", nameRDS.subset))){
  print(paste0(nameRDS.subset, " RDS file found, you can proceed"))
} else if(file.exists(file.path(RDSfolder, "merged", paste0(nameRDS)))){
  print(paste0(nameRDS," RDS file found, you can proceed"))
} else{
  stop(paste0(nameRDS," RDS file not found, check the location"))
}
```
## If the analyzed RDS does not exists load the big RDS and subset

### Load big RDS

```{r}
if (file.exists(file.path(RDSfolder, "analyzed", nameRDS.subset))){
  print("Analyzed RDS already exist will just run the visualizations")
  subset.seurat <- readRDS(file.path(RDSfolder, "analyzed", nameRDS.subset))
} else{
  print("Analyzed RDS does not exist will perform subset, analysis and visualization")
  combined.seurat <- readRDS(file.path(RDSfolder, "merged", paste0(nameRDS)))
}
```

### Now we subset the 48h 72h timepoints and run PCA

```{r}

if (!file.exists(file.path(RDSfolder, "analyzed", nameRDS.subset))){
  subset.seurat <- subset(combined.seurat,
                          cells = colnames(combined.seurat)
                          [combined.seurat[[]][, metadata.subset]
                            %in% metadata.subset.values])
  # We do not need combined.seurat anymore
  rm(combined.seurat)
  subset.seurat <- NormalizeData(subset.seurat,
                                 verbose = FALSE)
  subset.seurat <- FindVariableFeatures(subset.seurat,
                                        verbose = FALSE, nfeatures = 1000)
  cat("Scaling merged object..\n")
  subset.seurat <- ScaleData(subset.seurat,
                             verbose = TRUE,
                             vars.to.regress = c("percent.mt", "S.Score",
                                                 "G2M.Score"))
  manual.removal.genes <- ""
  if (length(unique(subset.seurat$Directory)) > 1) {
    cat("more than one 10x well detected, restricting variable features to limit batch effect",
        "\nvariable features will include gene with expression between 0.05 and 0.8 percentile\n")
    average.expression <- rowMeans(AverageExpression(subset.seurat, group.by = "Directory")[[1]])
    genes.to.exclude <- names(average.expression[average.expression < quantile(average.expression,
                                                                               0.05) | average.expression > quantile(average.expression,
                                                                                                                     0.8)])
    
    
    used.var.gene <- setdiff(VariableFeatures(subset.seurat),
                             c(genes.to.exclude, manual.removal.genes))
    
  } else {
    cat("Only experiments from a single 10x well is detected,\n 
        all variable genes are used as there shouldn't be batch effect\n")
    #run PCA analysis
    used.var.gene <- setdiff(VariableFeatures(subset.seurat),
                             c(manual.removal.genes))
  }
  subset.seurat <- RunPCA(subset.seurat, npcs = 50, verbose = FALSE, features = used.var.gene)
}
```

### Run UMAP and clustering

```{r}
ElbowPlot(subset.seurat, ndims = 50)

if (!file.exists(file.path(RDSfolder, "analyzed", nameRDS.subset))){
  subset.seurat <- RunUMAP(subset.seurat, reduction = "pca",
                           n.components = 2L,  
                           dims = 1:10, seed.use = 13)
  subset.seurat <- FindNeighbors(subset.seurat, reduction = "pca",
                                 dims = 1:10)
  subset.seurat <- FindClusters(subset.seurat, resolution = 0.2)
}
```

# Basic plots

## Here, we identify the clusters, change their names and put the correct colors

```{r}
Idents(subset.seurat) <- "seurat_clusters"
new.cluster.name <- c("Prim. Streak", "Epiblast", "Ant. Prim. Streak", "Pluripotent")
names(new.cluster.name) <- levels(subset.seurat$seurat_clusters)
subset.seurat <- RenameIdents(subset.seurat, new.cluster.name)
subset.seurat[["Fate"]] <- Idents(subset.seurat)
if (any(! unique(as.character(subset.seurat$Fate)) %in% unlist(list.Fate.level))) {
  stop("The following Fate are not in list.Fate.level: ",
       paste(unique(as.character(subset.seurat$Fate))[! unique(as.character(subset.seurat$Fate)) %in% unlist(list.Fate.level)],
             collapse = ", "), "\n")
} else {
  cat("all good on nomenclature")
  subset.seurat[["FateColor"]] <- my.fate.colors[as.character(subset.seurat$Fate)]
  subset.seurat$Fate <- factor(subset.seurat$Fate,levels =
                                 names(my.fate.colors))

}
```

## Get markers for each Fate, display as a heatmap and save csv

Find markers and save csv:

```{r}
if (!file.exists(file.path(output.directory, "markers.48-72h.csv"))) {
  Idents(subset.seurat) <- "Fate"
  # Only use 400 cells max per Fate
  all.markers <- FindAllMarkers(subset.seurat, logfc.threshold = 0.5, min.diff.pct = 0.2, max.cells.per.ident = 400)
  dir.create(output.directory, showWarnings = FALSE, recursive = TRUE)
  write.csv(all.markers, file = file.path(output.directory, "markers.48-72h.csv"))
} else {
  print("Markers already identified")
  all.markers <- read.csv(file.path(output.directory, "markers.48-72h.csv"))
}

```

Display top 10 markers as a heatmap

```{r}
#| label: HeatMap. marker genes
# Initiate the parameters which will be used for the plots
params <- list(nameRDS = paste0("only48h72h_from", nameRDS), Col.featurePlot = Col.featurePlot)
params$current.fig <- SwitchFigure(Fig = "S2", Panel = "Heatmap.48.72h.WT")
# Define the number of markers
nMarkers <- 10
# Select the top (ranked by avg_log2FC)
top.n <- all.markers %>% group_by(cluster) %>% top_n(n = nMarkers, wt = avg_log2FC)
# Plot the heatmap
g <- DoHeatmap(subset.seurat,
               features = top.n$gene,
               size = 4, group.colors = my.fate.colors) +
  scale_fill_gradientn(colors = rev(RColorBrewer::brewer.pal(n = 10, name = "RdBu")))

savePngPdf(g, params$current.fig,
           paste0(nameRDS,".Heatmap.top", nMarkers, ".marker.per.Fate"),
           width = 8, height = 10)
print(g)
```
Save RDS
```{r}
if (!file.exists(file.path(RDSfolder, "analyzed", nameRDS.subset))){
  # Save RDS
  dir.create(file.path(RDSfolder, "analyzed"), showWarnings = FALSE, recursive = TRUE)
  saveRDS(subset.seurat, file.path(RDSfolder, "analyzed", nameRDS.subset))
}
```

