---
title: "IF.pixel.membrane.measurements.to.graphs"
format: html
editor: source
---

```{r, setup, include=FALSE}
# choose working directory
wd <- file.path(Sys.getenv("HOME"), "allScriptsFromMayranEtAl2025")
knitr::opts_knit$set(root.dir = wd)
```

```{r}
library(usefulLDfunctions)
safelyLoadAPackageInCRANorBioconductor("ggplot2")
safelyLoadAPackageInCRANorBioconductor("dplyr")
safelyLoadAPackageInCRANorBioconductor("ggh4x")
# Path with all csv
path <- wd
tsvPath <- file.path("output.files", "imaging", "membrane", "groovy_outputs")
pattern <- "*.tsv"
path_for_plots <- file.path(wd, "output.files", "imaging", "membrane")
my.theme <- theme_classic() +
    theme(
        panel.background = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        strip.background =  element_blank()
    )

diagnostic_mode <- TRUE
```

Create output directory

```{r}
if (! dir.exists(path_for_plots)) {
  dir.create(path_for_plots, recursive = TRUE)
}
```

# Load data and merge into one table

```{r}
# combine all results into a single dataframe
df_res_fluo <- do.call(
  rbind,
  lapply(
    list.files(file.path(path, tsvPath), pattern = pattern, full.names = TRUE, recursive = TRUE),
    function(fn) {
      df <- read.delim(fn, header = FALSE)
      df$filename <- fn
      return(df)
    }
  )
)

dim(df_res_fluo)
# [1] 22844812        3
colnames(df_res_fluo)[1:2] <- c("ECAD", "NCAD")

df_kv <- data.frame(filename = unique(df_res_fluo$filename))
df_kv$BaseImage <- sapply(strsplit(sapply(as.character(df_kv$filename), basename), "_slice"), "[[", 1)
df_kv$Slice <- as.numeric(gsub("_Fluorogram.tsv", "", sapply(strsplit(as.character(df_kv$filename), "_slice_"), tail, 1)))
df_kv$Stage <- sapply(strsplit(sapply(as.character(df_kv$filename), basename), "\\."), "[[", 5)
table(df_kv$Stage)
# 102h 114h 120h  78h  90h  96h 
#  160  152  328  189  155  201 

# merge the results of phase with the key values
df_results <- merge(df_res_fluo, df_kv, by = "filename", all.x = T)

# Remove dataframes which are not needed anymore
rm(df_res_fluo, df_kv)
```

Here we identify the Slices with a drop in E-CAD + N-CAD signal to get the outside of the gastruloids.

```{r}
# Get the Avg_Sum_signal in neighbouring slides (just before and just after)
summary_sum <- df_results %>%
  group_by(BaseImage, Slice, Stage) %>%
  summarize(
    Avg_Sum_signal = mean(ECAD + NCAD),
    nPixels = n(),
    ECADsat = sum(ECAD == 255),
    NCADsat = sum(NCAD == 255)
  ) %>%
  mutate(
    propECADsat = ECADsat / nPixels,
    propNCADsat = NCADsat / nPixels
  ) %>%
  group_by(BaseImage) %>%
  mutate(
    nSlices = max(Slice) - min(Slice),
    inFirstHalf = Slice <= min(Slice) + nSlices / 2
  ) %>%
  arrange(Slice) %>%
  mutate(Avg_Sum_signal_After = lead(Avg_Sum_signal)) %>%
  ungroup()
# Compute the ratio between the average and the average in the next slide
summary_sum <- summary_sum %>%
  mutate(
    Avg_Sum_signal_fc = Avg_Sum_signal / Avg_Sum_signal_After
  )
```

Define a threshold for `Avg_Sum_signal_fc` and for the proportion of pixels saturated.

```{r}
threshold.value <- 0.85
threshold.prop <- 0.02
```

Plot the values

```{r}
# Plot the values
if (diagnostic_mode) {
  for (my.stage in unique(summary_sum$Stage)) {
    g <- ggplot(subset(summary_sum, Stage == my.stage), aes(x = Slice, y = Avg_Sum_signal, color = "Average")) +
      geom_point() +
      geom_line() +
      facet_wrap(~BaseImage, scales = "free") +
      my.theme +
      theme(
        legend.position = "none"
      )
    print(g)
    g <- ggplot(subset(summary_sum, Stage == my.stage), aes(x = Slice, y = Avg_Sum_signal_fc, color = "Average")) +
      geom_point() +
      geom_line() +
      geom_hline(yintercept = threshold.value) +
      facet_wrap(~BaseImage, scales = "free") +
      my.theme +
      theme(
        legend.position = "none"
      )
    print(g)
  }
}
```

Add new variables:

```{r}
# Add variable to Filter:
# The first Slice is the first after any Slice in the first half which is below the threshold
# Or the first Slice if all slices are above the threshold
summary_sum <- summary_sum %>%
    group_by(BaseImage, Slice) %>%
    mutate(
        belowThreshold = ifelse(is.na(Avg_Sum_signal_fc),
            FALSE, Avg_Sum_signal_fc < threshold.value
        ),
        enoughNotSat = propECADsat < threshold.prop & propNCADsat < threshold.prop
    ) %>%
    group_by(BaseImage) %>%
    mutate(
        firstTrueValue = ifelse(is.infinite(max(Slice[belowThreshold & inFirstHalf])),
            Avg_Sum_signal[Slice == min(Slice)],
            Avg_Sum_signal_After[Slice == max(Slice[belowThreshold & inFirstHalf])]
        ),
        firstSlice = Slice[Avg_Sum_signal == firstTrueValue],
        possibleSlices = paste(Slice[Slice >= firstSlice & enoughNotSat], collapse = ","),
        maxNPixels = max(nPixels[Slice %in% strsplit(possibleSlices, ",")[[1]]]),
        selectedSlice = Slice[nPixels[Slice == Slice] == maxNPixels]
    )
```

Get profile for each BaseImage:

```{r}
# Replot
if (diagnostic_mode) {
    for (my.stage in unique(summary_sum$Stage)) {
        g <- ggplot(subset(summary_sum, Stage == my.stage), aes(x = Slice, y = Avg_Sum_signal, color = Slice == firstSlice)) +
            geom_point() +
            geom_line(color = "black") +
            facet_wrap(~BaseImage, scales = "free") +
            my.theme +
            theme(
                legend.position = "none"
            )
        print(g)
        g <- ggplot(subset(summary_sum, Stage == my.stage), aes(x = Slice, y = Avg_Sum_signal_fc, color = Slice == firstSlice)) +
            geom_point() +
            geom_line(color = "black") +
            geom_hline(yintercept = threshold.value) +
            facet_wrap(~BaseImage, scales = "free") +
            my.theme +
            theme(
                legend.position = "none"
            )
        print(g)
    }
}
```

Get profile for each BaseImage and get the proportion of saturated:

```{r}
all.baseimgs <- unique(summary_sum$BaseImage)
names(all.baseimgs) <- all.baseimgs
all.baseimgs <- gsub(
    "Median_1.0_3.8.22.", "",
    gsub(
        ".IF.DAPI.CDH1.CDH2.TBX6.lif - ", "",
        gsub(
            ".tif", "",
            gsub("_Merging_001", "", all.baseimgs)
        )
    )
)
# Value used to transform the data
coeff <- 0.001
coeff_ncells <- 500
g <- ggplot(summary_sum, aes(x = Slice, y = Avg_Sum_signal, color = Slice == selectedSlice)) +
    geom_line(aes(y = nPixels / coeff_ncells), color = "blue", lty = 2) +
    geom_vline(aes(xintercept = firstSlice), color = "orange", linewidth = 1.5) +
    geom_hline(aes(yintercept = 0.02 / coeff), color = "yellow", linewidth = 1.5) +
    geom_hline(aes(yintercept = firstTrueValue / 2), color = "black") +
    geom_point() +
    geom_line(color = "black") +
    geom_line(aes(y = propECADsat / coeff), color = "green") +
    geom_line(aes(y = propNCADsat / coeff), color = "red") +
    scale_y_continuous(

        # Features of the first axis
        name = "Average of Sum of Signal",

        # Add a second axis and specify its features
        sec.axis = sec_axis(~ . * coeff, name = "Proportion of ECAD/NCAD sat pixels", labels = scales::percent_format())
    ) +
    facet_wrap(~BaseImage, scales = "free", labeller = labeller(BaseImage = all.baseimgs)) +
    my.theme +
    theme(
        legend.position = "none"
    )
# ggsave(file.path(path_for_plots, "check.png"), g, width = 20, height = 20)
```

Once you are happy with filtering propagate it to df_results

```{r}
df_results_tmp <-
    merge(
        df_results,
        summary_sum %>%
            dplyr::select(Slice, BaseImage, firstSlice, selectedSlice)
    )

# Actual filtering
df_results_filter <- df_results_tmp %>%
    filter(Slice == selectedSlice)

# # Remove unused dataframes
# rm(df_results_tmp, df_results)
```

More annotation

```{r}
all.baseimgs <- unique(summary_sum$BaseImage)
names(all.baseimgs) <- all.baseimgs
all.baseimgs <- gsub(
    "Median_1.0_3.8.22.", "",
    gsub(
        ".IF.DAPI.CDH1.CDH2.TBX6.lif - ", "",
        gsub(
            ".tif", "",
            gsub("_Merging_001", "", all.baseimgs)
        )
    )
)

meta.data <- unique(summary_sum[, c("BaseImage", "Stage")])
meta.data$shortBaseImage <- all.baseimgs[meta.data$BaseImage]
meta.data <- meta.data %>%
    mutate(
        clone = case_when(
            grepl("8H", shortBaseImage) ~ "8H",
            grepl("5H", shortBaseImage) ~ "5H",
            .default = "Unknown"
        )
    ) %>%
    group_by(Stage, clone) %>%
    mutate(
        replicate = 1:n(), ,
        pos = gsub(paste0(Stage, ".", clone), "", shortBaseImage)
    )

df_results_filter <- merge(df_results_filter, meta.data)

df_results_filter$Stage <- factor(
    df_results_filter$Stage,
    levels = paste0(sort(as.numeric(gsub("h", "", unique(df_results_filter$Stage)))), "h")
)
meta.data$Stage <- factor(
    meta.data$Stage,
    levels = levels(df_results_filter$Stage)
)
```

```{r}
# Define the thresholds
thresholdECAD <- 40
thresholdNCAD <- 15
xmax <- 255
ymax <- 255

# Add a new column to classify points into quadrants
df_results_filter <- df_results_filter %>%
    mutate(quadrant = case_when(
        ECAD > thresholdECAD & NCAD > thresholdNCAD ~ "Q1",
        ECAD <= thresholdECAD & NCAD > thresholdNCAD ~ "Q2",
        ECAD <= thresholdECAD & NCAD <= thresholdNCAD ~ "Q3",
        ECAD > thresholdECAD & NCAD <= thresholdNCAD ~ "Q4"
    ))

# Calculate the proportion of points in each quadrant, split by Stage
proportion_df <- df_results_filter %>%
    group_by(BaseImage, shortBaseImage, Stage, clone, replicate, quadrant) %>%
    summarise(count = n()) %>%
    mutate(percentage = count / sum(count) * 100)

# Define label positions for each quadrant
label_positions <- data.frame(
    quadrant = c("Q1", "Q2", "Q3", "Q4"),
    x = c(220, 20, 20, 220), # Approximate positions based on axis limits
    y = c(220, 220, 5, 5)
)

# Merge the label positions with the proportion data
proportion_df <- merge(proportion_df, label_positions, by = "quadrant")
```

Plot the raw values for the selected slice for all images

```{r}
g <- ggplot(
    df_results_filter,
    aes(x = ECAD, y = NCAD)
) +
    # geom_bin_2d(bins = 100, drop = FALSE) +
    stat_bin2d(bins = 100, aes(fill = ..density..)) +
    geom_text(data = meta.data, x = 0, y = Inf, aes(label = pos), hjust = 0, vjust = 1) +
    geom_vline(xintercept = thresholdECAD, linetype = "dashed", color = "grey") +
    geom_hline(yintercept = thresholdNCAD, linetype = "dashed", color = "grey") +
    geom_text(
        data = proportion_df, aes(x = x, y = y, label = paste0(round(percentage, 1), "%")),
        color = "black", size = 2, fontface = "bold"
    ) +
    expand_limits(x = c(0, xmax), y = c(0, ymax)) +
    xlab("E-CAD intensity (A.U.)") +
    ylab("N-CAD intensity (A.U.)") +
    scale_fill_gradientn(colours = c("white", "#ffe808", "#ffce00", "#ff9a00", "#ff5a00", "#ff0000"), trans = "log") +
    facet_nested(Stage ~ clone + replicate) + #, render_empty = FALSE) +
    my.theme

ggsave(file.path(path_for_plots, "global.pdf"), width = 25, height = 9)
ggsave(file.path(path_for_plots, "global.png"), width = 25, height = 9, dpi = 250)
```

Plot the raw values for the selected slice for selected images

```{r}
figures <- list(
    "FigS3A" = c("78h.8HPosition 11", "90h.8HPosition 2", "96h.8HPosition 10", "102h.8HPosition 16", "114h.8HPosition 3", "120h.8HRegion 6"),
    "FigS6A" = c("78h.8HPosition 13", "90h.8HPosition 6", "96h.8HPosition 8", "102h.8HPosition 20", "114h.8HRegion 4", "120h.8HRegion 7", "78h.5HPosition 20", "90h.5HPosition 12", "96h.5HRegion 3-2", "102h.5HPosition 16", "114h.5HPosition 3", "120h.5HPosition 17")
)
for (my.panel in names(figures)) {
    g <- ggplot(
        subset(df_results_filter, shortBaseImage %in% figures[[my.panel]]),
        aes(x = ECAD, y = NCAD)
    ) +
        # geom_bin_2d(bins = 100, drop = FALSE) +
        stat_bin2d(bins = 100, aes(fill = ..density..)) +
        geom_vline(xintercept = thresholdECAD, linetype = "dashed", color = "grey") +
        geom_hline(yintercept = thresholdNCAD, linetype = "dashed", color = "grey") +
        geom_text(
            data = subset(proportion_df, shortBaseImage %in% figures[[my.panel]] & round(percentage, 0) != 0), aes(x = x, y = y, label = paste0(round(percentage, 0), "%")),
            color = "black", size = 3, fontface = "bold"
        ) +
        facet_grid(clone ~ Stage) +
        expand_limits(x = c(0, xmax), y = c(0, ymax)) +
        xlab("E-CAD intensity (A.U.)") +
        ylab("N-CAD intensity (A.U.)") +
        scale_fill_gradientn(colours = c("white", "#ffe808", "#ffce00", "#ff9a00", "#ff5a00", "#ff0000"), trans = "log") +
        my.theme +
        theme(
            legend.position = "none"
        )

    ggsave(file.path(path_for_plots, paste0(my.panel, ".pdf")), width = 16, height = length(figures[[my.panel]]) / 2)
}
```

Export some metadata

```{r}
write.csv(
    subset(summary_sum, Slice == selectedSlice),
    file.path(path_for_plots, "selected_slice.csv"),
    row.names = FALSE, quote = FALSE
)
```