---
title: "Correlation bulk RNA-seq"
author: "Alexandre Mayran"
format: html
editor: source
---

```{r, setup, include=FALSE}
# choose working directory
wd <- "/home/ldelisle/Documents/mygit/allScriptsFromMayranEtAl2025"
knitr::opts_knit$set(root.dir = wd)
```

# Analysing temporal dynamic of gastruloid cell diversification

## Parameters

```{r, parameters}
samplesPlan <- "RNAseq/samples.plan.time.course.txt"
tableWithNormalizedExpression <- "output.files/RNAseq/mergedTables/time_course/AllCufflinks_Simplified.txt.gz"
color.cells <- colorRampPalette(c(
    "#053061",
    "#6bacd0",
    "#f7f7f7",
    "#e58268",
    "#67001f"
))(103)
output.dir <- "output.files/RNAseq/time-course"
```

## Dependencies

```{r, dependencies}
# Install required packages
if (!"devtools" %in% installed.packages()) {
    install.packages("devtools", repos = "https://stat.ethz.ch/CRAN/")
}
if (!"usefulLDfunctions" %in% installed.packages()) {
    devtools::install_github("lldelisle/usefulLDfunctions")
}
library(usefulLDfunctions)
safelyLoadAPackageInCRANorBioconductor("dplyr")
safelyLoadAPackageInCRANorBioconductor("ggplot2")
safelyLoadAPackageInCRANorBioconductor("pheatmap")
# To have ellipse with only 3 points:
safelyLoadAPackageInCRANorBioconductor("ggforce")
# To have prettier facet:
safelyLoadAPackageInCRANorBioconductor("ggh4x")
# To get file extension:
library(tools)
# To get silhouette
safelyLoadAPackageInCRANorBioconductor("cluster")
safelyLoadAPackageInCRANorBioconductor("reshape2")
# To arrange plots
safelyLoadAPackageInCRANorBioconductor("ggpubr")
```

Custom functions

```{r, custom functions}
clustering_and_pca <- function(rldata, annot, fixedColors, title.heatmap.genes, output.file.heatmap.samples, title.heatmap.samples, output.file.pca) {
    # Cluster samples
    correlationMatrix <- cor(rldata, method = "spearman")
    newSampleDist <- as.dist(1 - correlationMatrix)
    clu <- hclust(newSampleDist, method = "ward.D2")
    dd <- as.dendrogram(clu)
    clu2 <- reorder(dd, 1:nrow(correlationMatrix), agglo.FUN = min)

    pheatmap(
        correlationMatrix,
        cellwidth = 10,
        cellheight = 10,
        annotation = annot,
        annotation_colors = fixedColors,
        sub = "spearmanCor - ward clustering",
        cluster_rows = as.hclust(clu2),
        cluster_cols = as.hclust(clu2),
        col = color.cells,
        main = title.heatmap.samples,
        filename = output.file.heatmap.samples
    )
    sample.pca <- prcomp(t(rldata),
                        center = TRUE,
                        scale. = FALSE)

    sample.pca.meta <- data.frame(
        samples.plan.df,
        sample.pca$x[rownames(samples.plan.df), ]
    )
    var <- round((sample.pca$sdev) ^ 2 / sum(sample.pca$sdev ^ 2) * 100)
    g <- ggplot(sample.pca.meta, aes(PC1, PC2)) +
        geom_point(aes(color = Time, shape = Batch), size = 3) +
        xlab(paste0("PC1:", var[1], "% variance")) +
        ylab(paste0("PC2:", var[2], "% variance")) +
        scale_color_manual(values = fixedColors[["Time"]]) +
        scale_shape_manual(values = 15:18) +
        theme_classic()
    ggsave(output.file.pca,
           g, width = 7, height = 7)
    plot.pca.ext <- file_ext(output.file.pca)
    g <- ggplot(sample.pca.meta, aes(PC1, PC3)) +
        geom_point(aes(color = Time, shape = Batch), size = 3) +
        xlab(paste0("PC1:", var[1], "% variance")) +
        ylab(paste0("PC3:", var[2], "% variance")) +
        scale_color_manual(values = fixedColors[["Time"]]) +
        scale_shape_manual(values = 15:18) +
        theme_classic()
    output.file.pca.1.3 <- paste0(file_path_sans_ext(output.file.pca), "_PC1-3.", plot.pca.ext)
    ggsave(output.file.pca.1.3,
           g, width = 7, height = 7)
}
```

## Process inputs

```{r, process inputs}
## Process samples plan
samples.plan.df <- read.delim(samplesPlan)
rownames(samples.plan.df) <- samples.plan.df$sample
samples.plan.df$Time <- sapply(strsplit(samples.plan.df$sample, "_"), head, n = 1)
samples.plan.df$Time <- factor(samples.plan.df$Time, levels = paste0(sort(as.numeric(gsub("h", "", unique(samples.plan.df$Time)))), "h"))
samples.plan.df$Replicate <- sapply(strsplit(samples.plan.df$sample, "_"), tail, n = 1)
samples.plan.df$`Fate bias` <- 
    ifelse(samples.plan.df$Replicate == "rep1",
           "Neuronal",
           "Mesodermal")


annot <- samples.plan.df[, c("Time", "Batch", "Fate bias")]
# to add color to time:
fixedColors <- list(
    Time = colorRampPalette(c("yellow", "orange", "red", "darkred"))(length(unique(samples.plan.df$Time))),
    Batch = c('batch1' = '#AEBBD5', 'batch2' = '#2B467D', 'batch3' = '#BC9B83', 'batch4' = '#5F2C09'),
    `Fate bias` = c('Neuronal' = '#002060', 'Mesodermal' = '#5F2C09'))
names(fixedColors$Time) <- sort(unique(samples.plan.df$Time))

## Process FPKM file
expressionDF <- read.delim(tableWithNormalizedExpression, check.names = FALSE)
colnames(expressionDF) <- gsub("^FPKM_", "", colnames(expressionDF))
rownames(expressionDF) <- expressionDF$gene_id
data <- expressionDF[, samples.plan.df$sample]
sumperline <- apply(data, 1, sum)
nonZdata <- data[sumperline != 0, ]
gene_short_names <- expressionDF$gene_short_name[sumperline != 0]
ldata <- log2(nonZdata + 1)

## Create output.dir
dir.create(output.dir, showWarnings = FALSE, recursive = TRUE)
```

## Now we will compute sample clustering and sample PCA on variant genes

```{r, clustering pca on variants}
for (n.var.genes in 2000) {
    rldata <- ldata[order(apply(ldata, 1, var), decreasing = T)[1:min(nrow(ldata), n.var.genes)], ]
    suffix.title <- paste(n.var.genes, "most variant genes")
    suffix.filename <- paste0(n.var.genes, "VarGenes")
    clustering_and_pca(rldata, annot, fixedColors,
                       title.heatmap.genes = paste0("log2(1 + FPKM) clustered by correlation\n", suffix.title),
                       output.file.heatmap.samples = file.path(output.dir, paste0("CorrelationMatrix_SpearWard_", suffix.filename, ".pdf")),
                       title.heatmap.samples = paste0("Sample clustering using log2(1 + FPKM)\n", suffix.title),
                       output.file.pca = file.path(output.dir, paste0("PCA_", suffix.filename, ".pdf")))
}

```

## Clustering analysis of genes

### Try a new norm

Set variables

```{r, clustering2 1}
n.var.genes <- 2000
my.genes <- rownames(ldata)[order(apply(ldata, 1, var), decreasing = T)[1:min(nrow(ldata), n.var.genes)]]
my.genes.names <- "top2000VariantGenes"
nClusters <- 15
```

Prepare data

```{r, clustering2 2}
mat <- ldata[my.genes, ]
annot.genes <- data.frame(
    gene_id = my.genes,
    gene_name = expressionDF$gene_short_name[match(
        my.genes,
        expressionDF$gene_id
    )]
)
rownames(annot.genes) <- my.genes
sub.df.max <- apply(mat, 1, max)
annot.genes$max.value <- sub.df.max[annot.genes$gene_id]
sub.df.norm <- mat / sub.df.max
d <- as.dist(1 - cor(t(sub.df.norm)))
df.gg2 <- melt(as.matrix(sub.df.norm))
df.gg2 <- merge(df.gg2, samples.plan.df[, c("sample", "Time", "Fate bias")],
    by.x = "Var2", by.y = "sample"
)
df.gg2$exp.time <- as.numeric(gsub("h$", "", df.gg2$Time))
```

Clustering

```{r, clustering2 3}
hc <- hclust(d, method = "ward.D2")
annot.genes$cluster2 <- NA
annot.genes[hc$labels, "cluster2"] <- letters[1:nClusters][cutree(hc, nClusters)]
```

Change cluster name and check with genes

```{r}
rename.df <- read.delim("RNAseq/cluster_rename.txt")
annot.genes$relabelled_cluster <- rename.df$new[match(annot.genes$cluster2, rename.df$old)]
for (gene in na.omit(rename.df$Gene)) {
    relabelled <- annot.genes$relabelled_cluster[annot.genes$gene_name == gene]
    expected <- rename.df$new[rename.df$Gene %in% gene]
    stopifnot("error in cluster relabelling" = relabelled == expected)
}
```

```{r}
# Put rainbow colors
clusterCol <- rainbow(nClusters)
names(clusterCol) <- letters[1:nClusters]
fixedColors[["cluster"]] <- clusterCol
fixedColors[["relabelled_cluster"]] <- clusterCol

dd <- as.dendrogram(hc)
hc2 <- reorder(dd, match(hc$labels, annot.genes[order(annot.genes$relabelled_cluster), "gene_id"]), agglo.FUN = min)

pheatmap(sub.df.norm,
    cluster_cols = F,
    color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 10, name = "RdBu")))(103),
    annotation_row = subset(annot.genes,
        select = "relabelled_cluster"
    ),
    annotation_col = annot,
    annotation_colors = fixedColors,
    show_rownames = F,
    cluster_rows = as.hclust(hc2),
    main = paste0("Log2(1+FPKM) norm to max clustered by correlation\n", my.genes.names),
    filename = file.path(output.dir, paste0("clustering_", nClusters, "_nmax_", my.genes.names, ".pdf"))
)
df.gg2$cluster <- annot.genes[df.gg2$Var1, "relabelled_cluster"]
g <- ggplot(df.gg2, aes(x = exp.time, y = value, color = `Fate bias`)) +
    stat_summary(aes(group = paste0(Var1, `Fate bias`)), fun = mean, geom = "line", alpha = 0.05) +
    stat_summary(fun = mean, geom = "line") +
    stat_summary(fun = mean, geom = "point") +
    scale_color_manual(values = fixedColors[["Fate bias"]]) +
    facet_wrap(. ~ cluster) +
    theme_minimal()
ggsave(file.path(output.dir, paste0("clustering_", nClusters, "_nmax_", my.genes.names, "_summary_FateBias.pdf")), g,
       width = 10, height = 10)
```

Plot for some clusters

```{r}
chosen.clusters <- c("a", "b", "e", "f", "k", "m")
chosen.clusters <- rename.df$new[match(chosen.clusters, rename.df$old)]
fixedColors[["cluster_selected"]] <- c("#7030A0", 
"#5F2C09", 
"#70AD47", 
"#BC9A83", 
"#E31A1C", 
"#002060")

names(fixedColors[["cluster_selected"]]) <- chosen.clusters

df.gg2.summary <- df.gg2 %>%
    group_by(cluster, exp.time) %>%
    summarize(
        averageScaledExpression = mean(value)
    )

g <- ggplot(subset(df.gg2.summary, cluster %in% chosen.clusters),
    aes(x = exp.time, y = averageScaledExpression,
        color = cluster, fill = cluster)) +
    geom_smooth() +
  scale_color_manual("Module", values = fixedColors[["cluster_selected"]]) +
  scale_fill_manual("Module", values = fixedColors[["cluster_selected"]]) +
  theme_classic() +
  ylab("Average of normalized expression") +
  scale_x_continuous("Stage (h)", seq(48, 96, 6), seq(48, 96, 6),
                     expand = c(0, 0), sec.axis = dup_axis()) + 
  guides(colour = guide_legend(nrow = 1),
         fill = guide_legend(nrow = 1)) +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.ticks.length.x = unit(-0.25, "cm"),
        axis.text.x.top = element_blank(),
        axis.title.x.top = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA, linewidth = 1),
        legend.position = c(0.75, 0.1),
        legend.background = element_rect(fill='transparent'))

ggsave(file.path(output.dir, paste0("clustering_", nClusters, "_nmax_", my.genes.names, "_summary_selected_smooth.pdf")), g,
       width = 9, height = 5)

df.gg2.summary.FateBias <- df.gg2 %>%
    group_by(cluster, `Fate bias`, exp.time) %>%
    summarize(
        averageScaledExpression = mean(value)
    )
get_breaks_dec <- function(x) {
    # Try every 0.2
    all_breaks <- seq(0, max(x) + 0.2, 0.2)
    breaks_in_range <- all_breaks[all_breaks <= max(x) & all_breaks >= min(x)]
    if (length(breaks_in_range) > 1) {
        return(breaks_in_range)
    }
    # Test 0.1
    all_breaks <- seq(0, max(x) + 0.1, 0.1)
    breaks_in_range <- all_breaks[all_breaks <= max(x) & all_breaks >= min(x)]
    return(breaks_in_range)
}

glist <- lapply(letters[1:nClusters], function(my.cluster) {
    ggplot(subset(df.gg2.summary.FateBias, cluster == my.cluster),
    aes(x = exp.time, y = averageScaledExpression,
        color = `Fate bias`, fill = `Fate bias`)) +
    geom_smooth() +
  theme_classic() +
  scale_x_continuous("Stage (h)", seq(48, 96, 6), seq(48, 96, 6),
                     expand = c(0, 0), sec.axis = dup_axis()) +
  scale_y_continuous("Average of\nnormalized expression",
                     breaks = get_breaks_dec) +
  ggtitle(my.cluster) +          
  scale_color_manual(values = fixedColors[["Fate bias"]]) +
  scale_fill_manual(values = fixedColors[["Fate bias"]]) + 
  guides(colour = guide_legend(nrow = 1),
         fill = guide_legend(nrow = 1)) +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.ticks.length.x = unit(-0.25, "cm"),
        axis.text.x.top = element_blank(),
        axis.title.x.top = element_blank(),
        panel.border = element_rect(colour = "black", fill = NA, linewidth = 1))
})
ggsave(file.path(output.dir, paste0("clustering_", nClusters, "_nmax_", my.genes.names, "_summary_FateBias_smooth_panel.pdf")), ggarrange(plotlist = glist, common.legend = TRUE),
       width = 9, height = 9)
```

Plot some genes

```{r}
my.genes <- c("Nodal", "Eomes", "Mixl1", "Gsc", "Lhx1", "Mesp1", "Msgn1", "Tbx6", "Meox1", "Cdh2", "Snai1", "Cdh1")
my.ids <- expressionDF$gene_id[match(my.genes, expressionDF$gene_short_name)]
names(my.genes) <- my.ids
temp.df.gg2 <- subset(df.gg2, Var1 %in% my.ids)
temp.df.gg2$Var1 <- factor(temp.df.gg2$Var1, levels = names(my.genes))
ggplot(temp.df.gg2,
       aes(x = exp.time, y = value, color = `Fate bias`)) +
    stat_summary(fun = mean, geom = "line") +
    scale_color_manual(values = fixedColors[["Fate bias"]]) +
    facet_wrap(. ~ Var1, labeller = labeller(Var1 = my.genes)) +
    theme_minimal()

ggsave(file.path(output.dir, "selected_genes_timecourse_fate.pdf"), width = 10, height = 4)
```

Write gene attribution for ModuleScore:

```{r}
write.table(annot.genes, file.path(output.dir, paste0("clustering_", nClusters, "_cs_", my.genes.names, ".txt")), quote = FALSE, row.names = FALSE, sep = "\t")
```

Write sessionInfo to file:

```{r, sessioninfo}
writeLines(capture.output(sessionInfo()), "RNAseq/sessionInfo_time-course.txt")
```